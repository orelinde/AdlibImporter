using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Chronozoom.Adlib.Importer.AdlibXml.FacetRecord;
using Chronozoom.Adlib.Importer.AdlibXml.SearchRecord;
using Chronozoom.Adlib.Importer.Data;
using Chronozoom.Adlib.Importer.Entities;
using Newtonsoft.Json;
using Orient.Client;

namespace Chronozoom.Adlib.Importer
{
    class Program
    {
        private static string APIURL = "http://amdata.adlibsoft.com/wwwopac.ashx?database=AMcollect&search=all&limit=100&xmltype=grouped";
        private static string APIFACETS = "http://amdata.adlibsoft.com/wwwopac.ashx?command=facets&database=amcollect&search=all&facet=creator&xmltype=grouped&limit=100";
        private static string HOST = "127.0.0.1";
        private static int PORT = 2424;
        private static string SERVERUSERNAME = "root";
        private static string SERVERPASSWORD = "password";
        private static string USERNAME = "admin";
        private static string PASSWORD = "admin";
        private static string DATABASE = "chronozoom";
        private static OrientDao dao;
        static void Main(string[] args)
        {
            dao = new OrientDao();
            dao.Connect(HOST, PORT, USERNAME, PASSWORD, DATABASE);
            //AdlibFacets facets = DownloadCreatorFacets();
            //List<Task<Tuple<string, AdlibSearchRecords>>> downloadItemsByCreator = DownloadItemsByCreator(facets);
            //List<ContentItem> items = ParseAdlibItemsToContentItems(downloadItemsByCreator);

            //Timeline timeline = new Timeline() { Title = "Musea in the Netherlands", ContentItems = new List<ContentItem>() };
            //ContentItem first = new ContentItem();
            //first.Title = "Amsterdam Museum collection sorted by date => creator";
            //first.ContentItems = items;
            //first.BeginDate = first.ContentItems.Min(r => r.BeginDate);
            //first.EndDate = first.ContentItems.Max(r => r.EndDate);
            //first.ContentItems = items;
            //timeline.ContentItems = new List<ContentItem> { first };
            //timeline.BeginDate = first.ContentItems.Min(r => r.BeginDate);
            //timeline.EndDate = first.ContentItems.Max(r => r.EndDate);
            //if (timeline.BeginDate > timeline.EndDate) timeline.EndDate = timeline.BeginDate;
            //if (first.BeginDate > first.EndDate) first.EndDate = first.BeginDate;
            //string json = JsonConvert.SerializeObject(timeline, Formatting.Indented);
            ////write string to file
            //System.IO.File.WriteAllText(@"D:\path1.txt", json);
            //string json = File.ReadAllText(@"D:\path1.txt");
            //Timeline timeline = JsonConvert.DeserializeObject<Timeline>(json);
            var timelineOrid = AddTimelineToDatabase(timeline);
            dao.Disconnect();
        }

        private static void StartAddingToTimeline(Timeline timeline,ORID timelineOrid)
        {
        }

        private static ORID AddTimelineToDatabase(Timeline timeline)
        {
           return dao.AddTimeline(timeline);
        }


        private static List<ContentItem> ParseAdlibItemsToContentItems(List<Task<Tuple<string, AdlibSearchRecords>>> downloadItemsByCreator)
        {
            List<ContentItem> parents = new List<ContentItem>();
            foreach (Task<Tuple<string, AdlibSearchRecords>> task in downloadItemsByCreator)
            {
                var term = task.Result.Item1;
                var items = task.Result.Item2;
                ContentItem parent = new ContentItem();
                parent.Title = term;
                parent.ContentItems = new LinkedList<ContentItem>();
                foreach (var adlibSearchRecord in items.Records)
                {
                    ContentItem item = new ContentItem();
                    decimal beginDate = 0;
                    decimal endDate = 0;
                    var parsedBegin = Decimal.TryParse(adlibSearchRecord.Begin, out beginDate);
                    var parsedEnd = Decimal.TryParse(adlibSearchRecord.End, out endDate);
                    item.BeginDate = adlibSearchRecord.Begin == null ? 0 : beginDate;
                    item.EndDate = adlibSearchRecord.End == null ? 0 : endDate;
                    item.Title = adlibSearchRecord.Title;
                    item.Priref = adlibSearchRecord.Priref;
                    if (adlibSearchRecord.Reproductions != null)
                    {
                        item.Source = "http://ahm.adlibsoft.com/ahmimages/" +
                                      adlibSearchRecord.Reproductions[0].Reference;
                    }
                    item.ContentItems = new LinkedList<ContentItem>();

                    parent.ContentItems.AddLast(item);
                }
                if (parent.ContentItems.Any())
                {
                    parent.BeginDate = parent.ContentItems.Min(r => r.BeginDate);
                    parent.EndDate = parent.ContentItems.Max(r => r.EndDate);
                    if (parent.EndDate < parent.BeginDate)
                    {
                        parent.EndDate = parent.BeginDate;
                    }
                }

                parents.Add(parent);
            }
            return parents;
        }

        private static List<Task<Tuple<String, AdlibSearchRecords>>> DownloadItemsByCreator(AdlibFacets facets)
        {
            List<Task<Tuple<String, AdlibSearchRecords>>> tasks = new List<Task<Tuple<String, AdlibSearchRecords>>>();
            foreach (AdlibFacetRecord record in facets.Records)
            {
                var record1 = record;
                tasks.Add(Task.Run(() =>
                {
                    var url = "http://amdata.adlibsoft.com/wwwopac.ashx?database=AMcollect&xmltype=grouped&search=creator='" + record1.Term + "'";
                    string xml = DownloadXml(url);
                    AdlibSearchRecords adlibSearchRecords = ParseToAdlibRecords(xml);
                    return new Tuple<string, AdlibSearchRecords>(record1.Term, adlibSearchRecords);
                }));
            }
            Task.WaitAll(tasks.ToArray());
            return tasks;
        }
        private static AdlibFacets DownloadCreatorFacets()
        {
            string xmlFacets = DownloadXml(APIFACETS);
            return ParseToAdlibFacets(xmlFacets);
        }
        private static AdlibFacets ParseToAdlibFacets(string xmlFacets)
        {
            var xmlSerializer = new XmlSerializer(typeof(AdlibFacets));
            StringReader reader = new StringReader(xmlFacets);
            var adlibData = (AdlibFacets)xmlSerializer.Deserialize(reader);
            return adlibData;
        }
        private static AdlibSearchRecords ParseToAdlibRecords(string xmlFacets)
        {

            var xmlSerializer = new XmlSerializer(typeof(AdlibSearchRecords));
            StringReader reader = new StringReader(xmlFacets);
            var adlibData = (AdlibSearchRecords)xmlSerializer.Deserialize(reader);
            return adlibData;
        }
        private static string DownloadXml(string url)
        {
            using (var client = new HttpClient())
            {
                client.Timeout = Timeout.InfiniteTimeSpan;
                return client.GetStringAsync(new Uri(url)).Result;
            }
        }

        private static void CreateDatabaseIfNotExists()
        {
            var db = new OrientDao();
            db.Connect(HOST, PORT, SERVERUSERNAME, SERVERPASSWORD);
            var created = db.CreateDatabase("chronozoom");
            db.Connect(HOST, PORT, USERNAME, PASSWORD, DATABASE); // Connect to database
            db.CreateClassesInDatabase();
            if (created)
            {
                db.CreateClassesInDatabase();

            }
            db.Disconnect();
        }
    }
}
